{
  "id": 46, 
  "title": "Blind SQL Injection", 
  "severity": "high", 
  "description": [
    "Due to the requirement for dynamic content of today's web", 
    "applications, many rely on a database backend to store data that will", 
    "be called upon and processed by the web application (or other", 
    "programs). Web applications retrieve data from the database by using", 
    "Structured Query Language (SQL) queries.\n\nTo meet demands of many", 
    "developers, database servers (such as MSSQL, MySQL, Oracle etc.) have", 
    "additional built-in functionality that can allow extensive control of", 
    "the database and interaction with the host operating system itself.", 
    "An SQL injection occurs when a value originating from the client's", 
    "request is used within a SQL query without prior sanitisation. This", 
    "could allow cyber-criminals to execute arbitrary SQL code and steal", 
    "data or use the additional functionality of the database server to", 
    "take control of more server components.\n\nThe successful exploitation", 
    "of a SQL injection can be devastating to an organisation and is one of", 
    "the most commonly exploited web application vulnerabilities.",
    "\n\n",
    "Injection was detected as it was possible to inject specific SQL", 
    "queries, that if vulnerable, result in the responses for each", 
    "injection being different. This is known as a blind SQL injection", 
    "vulnerability."
  ], 
  "fix": {
    "effort": 50, 
    "guidance": [
      "The only proven method to prevent against SQL injection attacks while", 
      "still maintaining full application functionality is to use", 
      "parameterized queries (also known as prepared statements). When", 
      "utilising this method of querying the database, any value supplied by", 
      "the client will be handled as a string value rather than part of the", 
      "SQL query.\n\nAdditionally, when utilising parameterized queries, the", 
      "database engine will automatically check to make sure the string being", 
      "used matches that of the column. For example, the database engine will", 
      "check that the user supplied input is an integer if the database", 
      "column is configured to contain integers."
    ]
  }, 
  "cwe": ["89"],
  "owasp_top_10": {"2013": [1]},
  "tags": [
    "web",
    "sql", 
    "blind",
    "injection", 
    "database"
  ], 
  "references": [
    {
      "url": "http://capec.mitre.org/data/definitions/7.html", 
      "title": "MITRE - CAPEC"
    }, 
    {
      "url": "http://projects.webappsec.org/w/page/13246963/SQL%20Injection", 
      "title": "WASC"
    }, 
    {
      "url": "https://www.owasp.org/index.php/Blind_SQL_Injection", 
      "title": "OWASP"
    }
  ]
}
