{
  "id": 70,
  "title": "Persistent Cross-Site Scripting (XSS)",
  "severity": "high", 
  "description": [
    "Client-side scripts are used extensively by modern web applications.", 
    "They perform from simple functions (such as the formatting of text) up", 
    "to full manipulation of client-side data and Operating System", 
    "interaction.",
    "\n\n",
    "Cross Site Scripting (XSS) allows clients to inject arbitrary scripting",
    "code into a request and have the server return the script to the",
    "client in the response. This occurs because the application is taking", 
    "untrusted data (in this example, from the client) and reusing it", 
    "without performing any validation or encoding.",
    "\n\n",
    "Persistent Cross Site Scripting vulnerabilities occur when the application",
    "stores user controlled information and then uses it to render HTTP",
    "response bodies to other clients.",
    "\n\n",
    "This type of vulnerability can be used by a cyber-criminal to perform",
    "session hijacking, phishing or denial of service attacks against other",
    "web application users."
  ],
  "fix": {
    "effort": 10,
    "guidance": [
      "To remedy XSS vulnerabilities, it is important to never use untrusted", 
      "or unfiltered data within the code of a HTML page.",
      "\n\n",
      "Untrusted data can originate not only form the client but potentially",
      "a third party or previously uploaded file etc. Filtering of untrusted",
      "data typically involves converting special characters to their HTML",
      "entity encoded counterparts (however, other methods do exist, see",
      "references). These special characters include:",
      "\n\n",
      "* `&`\n",
      "* `<`\n",
      "* `>`\n",
      "* `\"`\n",
      "* `'`\n",
      "* `/`\n",
      "\n\n",
      "An example of HTML entity encoding is converting `<` to `&lt;`. Although",
      "it is possible to filter untrusted input, there are five locations", 
      "within an HTML page where untrusted input (even if it has been", 
      "filtered) should never be placed:",
      "\n\n",
      "1. Directly in a script.\n",
      "2. Inside an HTML comment.\n",
      "3. In an attribute name.\n",
      "4. In a tag name.\n",
      "5. Directly in CSS.\n",
      "\n\n",
      "Each of these locations have their own form of escaping and filtering.",
      "\n\n",
      "_Because many browsers attempt to implement",
      "XSS protection, any manual verification of this finding should be", 
      "conducted using multiple different browsers and browser versions._"
    ]
  }, 
  "cwe": ["79"],
  "owasp_top_10": {"2013": [3]},
  "tags": [
    "web",
    "xss",
    "persistent",
    "script"
  ], 
  "references": [
    {
      "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting", 
      "title": "WASC"
    }, 
    {
      "url": "http://secunia.com/advisories/9716/", 
      "title": "Secunia"
    }, 
    {
      "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet", 
      "title": "OWASP"
    }
  ]
}